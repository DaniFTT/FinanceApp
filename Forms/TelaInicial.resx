<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        AAABAAEAICAAAAEAIACoEAAAFgAAACgAAAAgAAAAQAAAAAEAIAAAAAAAABAAAMMOAADDDgAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAfAAExXwABP98AAT/fAAE/3wABP98AAXgfwAADAAAAAF8AATMfAAE/3wA
        BP98AAT/fAAE/3sAA9t/AAAIfwAACHwAA9x8AAT/fAAE/3wABP98AAT/fAAEywAAAAF/AAAMfAAF4HwA
        BP98AAT/fAAE/3wABP98AATEAAAAAAAAAAB8AAT/fAAE/3wABP98AAT/fAAE/3wABP98AAcnfwAACHwA
        BP98AAT/fAAE/3wABP98AAT/fAAE/3sAAB97AAAffAAE/3wABP98AAT/fAAE/3wABP98AAT/fwAACHwA
        Byd8AAT/fAAE/3wABP98AAT/fAAE/3wABP8AAAAAAAAAAHwABP98AAT/fAAE/3wABP98AAT/fAAE/3wA
        Byd/AAAIfAAE/3wABP98AAT/fAAE/3wABP98AAT/ewAAH3sAAB98AAT/fAAE/3wABP98AAT/fAAE/3wA
        BP9/AAAIfAAHJ3wABP98AAT/fAAE/3wABP98AAT/fAAE/wAAAAAAAAAAfAAE/3wABP98AAT/fAAE/3wA
        BP98AAT/fAAHJ38AAAh8AAT/fAAE/3wABP98AAT/fAAE/3wABP97AAAfewAAH3wABP98AAT/fAAE/3wA
        BP98AAT/fAAE/38AAAh8AAcnfAAE/3wABP98AAT/fAAE/3wABP98AAT/AAAAAAAAAAB8AAT/fAAE/3wA
        BP98AAT/fAAE/3wABP98AAcnfwAACHwABP98AAT/fAAE/3wABP98AAT/fAAE/3sAAB97AAAffAAE/3wA
        BP98AAT/fAAE/3wABP98AAT/fwAACHwAByd8AAT/fAAE/3wABP98AAT/fAAE/3wABP8AAAAAAAAAAHwA
        BP98AAT/fAAE/3wABP98AAT/fAAE/3wAByd/AAAIfAAE/3wABP98AAT/fAAE/3wABP98AAT/ewAAH3sA
        AB98AAT/fAAE/3wABP98AAT/fAAE/3wABP9/AAAIfAAHJ3wABP98AAT/fAAE/3wABP98AAT/fAAE/wAA
        AAAAAAAAfAAE/3wABP98AAT/fAAE/3wABP98AAT/fAAHJ38AAAh8AAT/fAAE/3wABP98AAT/fAAE/3wA
        BP97AAAfewAAH3wABP98AAT/fAAE/3wABP98AAT/fAAE/38AAAh8AAcnfAAE/3wABP98AAT/fAAE/3wA
        BP98AAT/AAAAAAAAAAB8AAT/fAAE/3wABP98AAT/fAAE/3wABP98AAcnfwAACHwABP98AAT/fAAE/3wA
        BP98AAT/fAAE/3sAAB97AAAffAAE/3wABP98AAT/fAAE/3wABP98AAT/fwAACHwAByd8AAT/fAAE/3wA
        BP98AAT/fAAE/3wABP8AAAAAAAAAAHwABaB7AAPdewAD3XsAA917AAPdfAAEu38AAAZ/AAAIfAAE/3wA
        BP98AAT/fAAE/3wABP98AAT/ewAAH3sAAB98AAT/fAAE/3wABP98AAT/fAAE/3wABP9/AAAIfAAHJ3wA
        BP98AAT/fAAE/3wABP98AAT/fAAE/wAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAH8A
        AAh8AAT/fAAE/3wABP98AAT/fAAE/3wABP97AAAfewAAH3wABP98AAT/fAAE/3wABP98AAT/fAAE/38A
        AAh8AAcnfAAE/3wABP98AAT/fAAE/3wABP98AAT/AAAAAAAAAAAAAAAAAAAAAXsABTR8AARCfwAACAAA
        AAAAAAAAfwAACHwABP98AAT/fAAE/3wABP98AAT/fAAE/3sAAB97AAAffAAE/3wABP98AAT/fAAE/3wA
        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
        8H////gP///8A////wP///8D////A////wc=
</value>
  </data>
</root>